#!/bin/bash

# Ensure the script is run from the 0x02-i18n directory
if [ "$(basename $(pwd))" != "0x02-i18n" ]; then
    echo "Please run this script from the 0x02-i18n directory."
    exit 1
fi

# Function to create Python files and templates
create_files() {
    local app_file=$1
    local template_file=$2
    local app_content=$3
    local template_content=$4

    # Create Python file
    echo "$app_content" > "$app_file"
    chmod +x "$app_file"

    # Create templates directory if it doesn't exist
    mkdir -p templates

    # Create template file
    echo "$template_content" > "templates/$template_file"
}

# 6-app.py content
app6_content='#!/usr/bin/env python3
"""
6-app.py

Flask app demonstrating user login system mock with internationalization (i18n) using Flask-Babel.

Requirements:
- Ubuntu 18.04 LTS
- Python 3.7
- pycodestyle (version 2.5)
- README.md file present
- Python file ends with a new line
"""

from flask import Flask, render_template, request, g
from flask_babel import Babel, _
import pytz

app = Flask(__name__)
babel = Babel(app)

class Config:
    """
    Config class for Flask app configuration.

    Attributes:
    - LANGUAGES: List of available languages.
    - BABEL_DEFAULT_LOCALE: Default locale for Babel.
    - BABEL_DEFAULT_TIMEZONE: Default timezone for Babel.
    """
    LANGUAGES = ["en", "fr"]
    BABEL_DEFAULT_LOCALE = "en"
    BABEL_DEFAULT_TIMEZONE = "UTC"

app.config.from_object(Config)

users = {
    1: {"name": "Balou", "locale": "fr", "timezone": "Europe/Paris"},
    2: {"name": "Beyonce", "locale": "en", "timezone": "US/Central"},
    3: {"name": "Spock", "locale": "kg", "timezone": "Vulcan"},
    4: {"name": "Teletubby", "locale": None, "timezone": "Europe/London"},
}

def get_user():
    """
    Function to get a user dictionary by ID.

    Returns:
    - User dictionary or None if the user ID is not found.
    """
    try:
        user_id = int(request.args.get("login_as"))
        return users.get(user_id)
    except (TypeError, ValueError):
        return None

@app.before_request
def before_request():
    """
    Function to be executed before each request.
    Sets g.user to the user dictionary if a valid user is found.
    """
    g.user = get_user()

@babel.localeselector
def get_locale():
    """
    Function to determine the best-matching language for the user based on
    the "locale" query parameter, the user\'s locale, or the Accept-Language header in the request.

    Returns:
    - Best-matching language code ("en" or "fr").
    """
    locale = request.args.get("locale")
    if locale and locale in app.config["LANGUAGES"]:
        return locale
    if g.user and g.user["locale"] in app.config["LANGUAGES"]:
        return g.user["locale"]
    return request.accept_languages.best_match(app.config["LANGUAGES"])

@app.route("/")
def index():
    """
    Route for the index page.

    Returns:
    - Rendered template "6-index.html" with translated messages.
    """
    return render_template("6-index.html")

if __name__ == "__main__":
    app.run(debug=True)
'

# 6-index.html content
template6_content='<!DOCTYPE html>
<html>
<head>
    <title>{{ _("home_title") }}</title>
</head>
<body>
    <h1>{{ _("home_header") }}</h1>
    {% if g.user %}
        <p>{{ _("logged_in_as", username=g.user["name"]) }}</p>
    {% else %}
        <p>{{ _("not_logged_in") }}</p>
    {% endif %}
</body>
</html>
'

# 7-app.py content
app7_content='#!/usr/bin/env python3
"""
7-app.py

Flask app demonstrating user login system mock with internationalization (i18n) and timezone support using Flask-Babel.

Requirements:
- Ubuntu 18.04 LTS
- Python 3.7
- pycodestyle (version 2.5)
- README.md file present
- Python file ends with a new line
"""

from flask import Flask, render_template, request, g
from flask_babel import Babel, _
import pytz
from pytz import exceptions

app = Flask(__name__)
babel = Babel(app)

class Config:
    """
    Config class for Flask app configuration.

    Attributes:
    - LANGUAGES: List of available languages.
    - BABEL_DEFAULT_LOCALE: Default locale for Babel.
    - BABEL_DEFAULT_TIMEZONE: Default timezone for Babel.
    """
    LANGUAGES = ["en", "fr"]
    BABEL_DEFAULT_LOCALE = "en"
    BABEL_DEFAULT_TIMEZONE = "UTC"

app.config.from_object(Config)

users = {
    1: {"name": "Balou", "locale": "fr", "timezone": "Europe/Paris"},
    2: {"name": "Beyonce", "locale": "en", "timezone": "US/Central"},
    3: {"name": "Spock", "locale": "kg", "timezone": "Vulcan"},
    4: {"name": "Teletubby", "locale": None, "timezone": "Europe/London"},
}

def get_user():
    """
    Function to get a user dictionary by ID.

    Returns:
    - User dictionary or None if the user ID is not found.
    """
    try:
        user_id = int(request.args.get("login_as"))
        return users.get(user_id)
    except (TypeError, ValueError):
        return None

@app.before_request
def before_request():
    """
    Function to be executed before each request.
    Sets g.user to the user dictionary if a valid user is found.
    """
    g.user = get_user()

@babel.localeselector
def get_locale():
    """
    Function to determine the best-matching language for the user based on
    the "locale" query parameter, the user\'s locale, or the Accept-Language header in the request.

    Returns:
    - Best-matching language code ("en" or "fr").
    """
    locale = request.args.get("locale")
    if locale and locale in app.config["LANGUAGES"]:
        return locale
    if g.user and g.user["locale"] in app.config["LANGUAGES"]:
        return g.user["locale"]
    return request.accept_languages.best_match(app.config["LANGUAGES"])

@babel.timezoneselector
def get_timezone():
    """
    Function to determine the best-matching timezone for the user based on
    the "timezone" query parameter, the user\'s timezone, or the default timezone.

    Returns:
    - Best-matching timezone.
    """
    try:
        timezone = request.args.get("timezone")
        if timezone:
            return pytz.timezone(timezone)
        if g.user:
            return pytz.timezone(g.user["timezone"])
    except exceptions.UnknownTimeZoneError:
        return app.config["BABEL_DEFAULT_TIMEZONE"]

@app.route("/")
def index():
    """
    Route for the index page.

    Returns:
    - Rendered template "7-index.html" with translated messages.
    """
    return render_template("7-index.html")

if __name__ == "__main__":
    app.run(debug=True)
'

# 7-index.html content
template7_content='<!DOCTYPE html>
<html>
<head>
    <title>{{ _("home_title") }}</title>
</head>
<body>
    <h1>{{ _("home_header") }}</h1>
    {% if g.user %}
        <p>{{ _("logged_in_as", username=g.user["name"]) }}</p>
    {% else %}
        <p>{{ _("not_logged_in") }}</p>
    {% endif %}
</body>
</html>
'

# Create 6-app.py and 6-index.html
create_files "6-app.py" "6-index.html" "$app6_content" "$template6_content"

# Create 7-app.py and 7-index.html
create_files "7-app.py" "7-index.html" "$app7_content" "$template7_content"

# Create a README.md file if it doesn't exist
if [ ! -f README.md ]; then
    echo "# 0x02-i18n Project" > README.md
fi

# Create a virtual environment
python3 -m venv venv

# Activate the virtual environment
source venv/bin/activate

# Install Flask, Flask-Babel, and pytz
pip install Flask==2.0.0 flask_babel==2.0.0 pytz

# Notify the user
echo "Setup complete. You can now run your Flask apps with ./6-app.py and ./7-app.py"
